getwd()
hello()
hello <- function() {
print("Hello, world!")
}
hello()
a = 2
if(a == 2) {}
if(a == 2) {
"a"
}
if(a == 2) {
a
}
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
getwd()
setwd(../)
setwd("../")
getwd()
source("learnFunctions.R")
add(2, 3)
add2(2, 3)
add2(2)
source("learnFunctions.R")
add2(2)
add2(2, 3)
source("learnFunctions.R")
add2(2, 3)
add2 <- function(x, y) {
x + y
}
add2(3, 4)
x + y
add2 <- function(x, y) {
x + y
}
getUooer10 <- function(x) {
x[x > 10]
}
add2 <- function(x, y) {
x + y
}
getUpper10 <- function(x) {
x[x > 10]
}
getUpper10(c(1, 10, 11, 15, 3, 1))
above <- function(x, n) {
use <- x > n
x[use]
}
above(c(1, 7, 2, 4, 2, 9, 4), 3)
above <- function(x, n = 10) {
use <- x > n
x[use]
}
above(c(1, 7, 2, 4, 2, 9, 4), 3)
above(c(1, 7, 2, 4, 2, 9, 41))
columnMean <- function(x) {
n <- ncol(x)
means <- numeric(n)
for(i in 1:n) {
means[i] <- mean(x[, i])
}
means
}
getwd()
library(readr)
hw1_data <- read_csv("~/DataScience/Coursera/2_R_programming/quiz1_data/hw1_data.csv")
View(hw1_data)
data <- hw1_data
columnMean(data)
data
data <- read.csv("..\quiz1_data\hw1_data.csv")
data <- read.csv("../quiz1_data/hw1_data.csv")
data
columnMean(data)
columnMean <- function(x, removeNA = TRUE) {
n <- ncol(x)
means <- numeric(n)
for(i in 1:n) {
vec <- x[, i]
if(removeNA) {
bad <- is.na(vec)
vec <- vec[!bad]
}
means[i] <- mean(vec)
}
means
}
columnMean(data)
columnMean(data, F)
columnMean <- function(x, removeNA = TRUE) {
n <- ncol(x)
means <- numeric(n)
for(i in 1:n) {
means[i] <- mean(x[, i], na.rm = removeNA)
}
means
}
columnMean(data, F)
columnMean(data)
clear()
swirl()
library("swirl")
swirl()
TRUE == TRUE
(F == T) == F
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
telegram("says", "me")
submit()
mad_libs(place = "London", "fuking", "dog")
submit()
'I' %p% 'love' %p% 'R!'
x <- as.Date("2017-09-29")
x
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d1 <- as.Date("1970-01-01")
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclasst2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
