install.packages("quantmod")
install.packages("QuantTools")
knitr::opts_chunk$set(echo = TRUE) # параметр, который указывает, что необходимо выводить как сам код, так и результат в документе
knitr::opts_chunk$set(message =  FALSE) # параметр, который указывает, что необходимо выводить как сам код, так и результат в документе
# установить пакет
#install.packages("quantmod")
#install.packages("QuantTools")
# загрузить пакеты для дальнейшего использования
library(quantmod)
# установить пакет
install.packages("quantmod")
install.packages("QuantTools")
# загрузить пакеты для дальнейшего использования
library(quantmod)
library(QuantTools)
# вспомогательная функция - преобразовать объект data.table в xts  с сохранением индекса даты
quant_tools_to_xts <- function(df, ...){
df <- as.data.frame(df)
#df$date = as.Date(df$date)
ts = xts(df[,-1], order.by = df[,1])
return(ts)
}
library(quantmod)
library(QuantTools)
# вспомогательная функция - преобразовать объект data.table в xts  с сохранением индекса даты
quant_tools_to_xts <- function(df, ...){
df <- as.data.frame(df)
#df$date = as.Date(df$date)
ts = xts(df[,-1], order.by = df[,1])
return(ts)
}
# установить пакет
#install.packages("quantmod")
#install.packages("QuantTools")
# загрузить пакеты для дальнейшего использования
library(quantmod)
library(QuantTools)
# вспомогательная функция - преобразовать объект data.table в xts  с сохранением индекса даты
quant_tools_to_xts <- function(df, ...){
df <- as.data.frame(df)
#df$date = as.Date(df$date)
ts = xts(df[,-1], order.by = df[,1])
return(ts)
}
getSymbols("EOG",src="yahoo") # get yahoo finance
head(EOG) # начало серии
tail(EOG) # конецц серии
getSymbols("^GSPC",src="yahoo") # get yahoo finance
getSymbols("DGS10",src="FRED") # 10-Year Treasury Constant Maturity Rate (DGS10) from FRED
# https://fred.stlouisfed.org/series/DGS10 - проверить серию
micex <- get_finam_data('MICEX', from = '2012-01-01', to = Sys.Date()) # индекс ММВБ
# пакет QuantTools возвращает данные в формате data.table/data.frame, а не хts
class(micex)
MICEX <- quant_tools_to_xts(micex)
class(MICEX)
tail(MICEX)
knitr::opts_chunk$set(echo = TRUE) # параметр для того, чтобы выводился код
knitr::opts_chunk$set(fig.width=12, fig.height=7, fig.align="center", warning = FALSE, tidy=FALSE) # параметр для графиков
# Данные по корпоративным облигациям
bonds = get_finam_data('MICEXCBITR', from = '2012-01-01', to = Sys.Date()) # Индекс Корпоративных облигаций Московской Биржи
require(zoo)
require(xts)
require(forecast)
require(QuantTools)
require(quantmod)
# вспомогательная функция - преобразовать объект data.table в xts  с сохранением индекса даты
quant_tools_to_xts <- function(df, ...){
df <- as.data.frame(df)
#df$date = as.Date(df$date)
ts = xts(df[,-1], order.by = df[,1])
return(ts)
}
start.date = as.Date('2012-01-01')
end.date = Sys.Date()
micex <- get_finam_data('MICEX', from = '2012-01-01', to = Sys.Date()) # индекс ММВБ
MICEX <- quant_tools_to_xts(micex)
# пакет QuantTools возвращает данные в формате data.table/data.frame, а не хts
MICEX.rtn <- diff(log(MICEX$close)) # расчет лог-доходности
MICEX.rtn = MICEX.rtn[!is.na(MICEX.rtn)] # убрать значения NA из серии
plot(MICEX.rtn)
# Мосэнерго
MSNG <- get_finam_data('MSNG', from = '2012-01-01', to = Sys.Date()) # акции Мосэнерго
MSNG <- quant_tools_to_xts(MSNG)
lineChart(MSNG, theme = 'white') # график цен на акции
MSNG.rtn <- diff(log(MSNG$close)) # расчет лог-доходности
MSNG.rtn = MSNG.rtn[!is.na(MSNG.rtn)] # убрать значения NA из серии
plot(MSNG.rtn, main = 'Дневные доходности Мосэнерго') # график доходностей
# Данные по корпоративным облигациям
bonds = get_finam_data('MICEXCBITR', from = '2012-01-01', to = Sys.Date()) # Индекс Корпоративных облигаций Московской Биржи
bonds <- quant_tools_to_xts(bonds)
bonds.rtn <- diff(log(bonds$close)) # расчет лог-доходности
bonds.rtn = bonds.rtn[!is.na(bonds.rtn)] # убрать значения NA из серии
library(PerformanceAnalytics)
# Веса в портфеле
w = c(0.2,0.4,0.4) # 20% / 40% / 40%
portfolio.prices <- as.xts(merge(MSNG$close, MICEX$close, bonds$close))
portfolio.returns <- na.omit(CalculateReturns(portfolio.prices))
colnames(portfolio.returns) <- c("MSNG","MICEX","Bonds")
cor(portfolio.returns)
library('mnormt')
df = seq(2.0,7.0,.05)
n = length(df)
rep = rep(0,n)
library(MASS)
for(i in 1:n){
fit = cov.trob(portfolio.returns,nu=df)
rep[i] = sum(log(dmt(portfolio.returns, mean=fit$center, S=fit$cov, df=df[i])))
}
indicate = (1:length(df))[ (rep== max(rep)) ]
dfhat = df[indicate]
estim = cov.trob(portfolio.returns,nu=dfhat,cor=TRUE)
options(digits=3)
muhat = estim$center
covhat = estim$cov
dfhat
muhat
covhat
muP = as.numeric(w %*% muhat) #ожидаемая доходность портфеля
varP = as.numeric(w %*% covhat %*% w) #дисперсия портфеля
sdP = sqrt(varP) # с.к.о. порфеля
muP
varP
sdP
sigmaP = sqrt((dfhat-2)/dfhat) * sdP
sigmaP
Var = -10^6*(muP + sigmaP* qt(alpha, dfhat))
# Данные по корпоративным облигациям
bonds <- get_finam_data('MICEXCBITR', from = '2012-01-01', to = Sys.Date()) # Индекс Корпоративных облигаций Московской Биржи
bonds <- quant_tools_to_xts(bonds)
bonds.rtn <- diff(log(bonds$close)) # расчет лог-доходности
bonds.rtn = bonds.rtn[!is.na(bonds.rtn)] # убрать значения NA из серии
library(PerformanceAnalytics)
# Веса в портфеле
w = c(0.2,0.4,0.4) # 20% / 40% / 40%
portfolio.prices <- as.xts(merge(MSNG$close, MICEX$close, bonds$close))
portfolio.returns <- na.omit(CalculateReturns(portfolio.prices))
colnames(portfolio.returns) <- c("MSNG","MICEX","Bonds")
cor(portfolio.returns)
library('mnormt')
df = seq(2.0,7.0,.05)
n = length(df)
rep = rep(0,n)
library(MASS)
for(i in 1:n){
fit = cov.trob(portfolio.returns,nu=df)
rep[i] = sum(log(dmt(portfolio.returns, mean=fit$center, S=fit$cov, df=df[i])))
}
indicate = (1:length(df))[ (rep== max(rep)) ]
dfhat = df[indicate]
estim = cov.trob(portfolio.returns,nu=dfhat,cor=TRUE)
options(digits=3)
muhat = estim$center
covhat = estim$cov
dfhat
muhat
covhat
muP = as.numeric(w %*% muhat) #ожидаемая доходность портфеля
varP = as.numeric(w %*% covhat %*% w) #дисперсия портфеля
sdP = sqrt(varP) # с.к.о. порфеля
muP
varP
sdP
sigmaP = sqrt((dfhat-2)/dfhat) * sdP
sigmaP
Var = -10^6*(muP + sigmaP* qt(alpha, dfhat))
setwd("~/Documents/DataScience/Coursera/3_Getting_and_cleaning_data/test_files")
install.packages("RMySQL")
library(RMySQL)
dbConn <- dbConnect(MySQL(), user = "genome", host = "genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(dbConn, "show databases;")
dbDisconnect(dbConn)
result
